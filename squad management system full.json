{
    "openapi": "3.0.0",
    "info": {
      "title": "API Spec Squad Management",
      "version": "1",
      "description": "User Management, Organization, Chapter created by Achmad Rizki Nur Fauzie"
    },
    "paths": {
      "/user": {
        "post": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "tags": ["User Management"],
          "summary": "Create new user by admin",
          "description": "Create new user",
          "parameters": [
            {
              "name": "is_admin",
              "in": "raw_request",
              "required": true,
              "description": "If is_admin was false, then role user was not admin",
              "schema": {
                "type": "boolean",
                "nullable": false,
                "default": false
              }
            },
            {
              "name": "tipe_chapter",
              "in": "raw_request",
              "required": true,
              "description": "Example: FE = 1, BE = 2, QA = 3",
              "schema": {
                "type": "integer",
                "nullable": false
              }
            },
            {
              "name": "tipe_organization",
              "in": "raw_request",
              "required": true,
              "description": "Example: Enggineering Manager = 1, Technical Lead = 2",
              "schema": {
                "type": "integer",
                "nullable": false
              }
            },
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do create user"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "request_body": {
                    "description": "Example raw request, user must have to be role admin to create user",
                    "value": {
                      "username": "AchmadRizkiNF",
                      "email": "achmadrizkinf@gmail.com",
                      "password": "testingCooking",
                      "is_admin": 0,
                      "tipe_pegawai": 1,
                      "tipe_chapter": 1,
                      "tipe_organization": 2
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success create user",
              "content": {
                "application/json": {
                  "examples": {
                    "raw": {
                      "description": "Success create user",
                      "value": {
                        "status_code": 200,
                        "message": "Insert user success"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request, failed create user",
              "content": {
                "application/json": {
                  "examples": {
                    "raw": {
                      "description": "Bad Request, failed create user",
                      "value": {
                        "status_code": 400,
                        "message": "Bad Request, failed create user"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "status_code": 500,
                        "message": "Server Error, cannot get data"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": ["User Management"],
          "summary": "Get All User",
          "description": "Get All User",
          "parameters": [
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do get all user"
            }
          ],
          "responses": {
            "200": {
              "description": "Get All User Success",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Get All User Success",
                      "value": {
                        "status_code": 200,
                        "message": "Get All User Success",
                        "data": [
                          {
                            "uuid": "123e4567-e89b-12d3-a456-426614174000",
                            "username": "Achmad Rizki Nur Fauzie",
                            "email": "achmadrizkinf@gmail.com",
                            "tipe_pegawai": "Intern"
                          },
                          {
                            "uuid": "123e4567-e89b-12d3-a456-S3114174000",
                            "username": "Achmad Rizki Ganteng",
                            "email": "testingCooking@gmail.com",
                            "tipe_pegawai": "OS"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "status_code": 500,
                        "message": "Server Error, cannot get data"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/user/:uuid_user": {
        "delete": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "tags": ["User Management"],
          "summary": "Delete existing user by uuid user",
          "description": "Delete existing user by uuid user",
          "parameters": [
            {
              "name": "uuid_user",
              "in": "path",
              "required": true,
              "description": "if admin was true, user was admin"
            },
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do delete user by uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success delete user by uuid user",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "description": "Success delete todolist",
                      "value": {
                        "status_code": 200,
                        "message": "Success delete user"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "503": {
              "description": "Failed delete, user uuid not found",
              "content": {
                "application/json": {
                  "examples": {
                    "failed": {
                      "description": "Failed delete todolist",
                      "value": {
                        "status_code": 200,
                        "message": "Failed delete user, user uuid not found"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "tags": ["User Management"],
          "summary": "Change User by uuid",
          "description": "Change User by uuid. You must have bearrer token to access this",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "request_body": {
                    "description": "Example raw request, user must have to be role admin to change role user by uuid",
                    "value": {
                      "username": "achmadrizkinf",
                      "email": "ashiapTest@gmail.com",
                      "alamat": "jakarta",
                      "tanggal_lahir": "19 Januari 2029",
                      "agama": "Islam",
                      "no_telp": "09121230",
                      "jenis_kelamin": 1
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "name": "uuid_user",
              "in": "raw_request",
              "required": true,
              "description": "if admin was true, user was admin"
            },
            {
              "name": "jenis_kelamin",
              "in": "raw_request",
              "required": true,
              "description": "Example: Male = 1, Female = 2"
            },
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do delete user by uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success update user role by uuid",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "description": "Success update user role by uuid",
                      "value": {
                        "status_code": 200,
                        "message": "Success update user role by uuid"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Failed delete, user uuid not found",
              "content": {
                "application/json": {
                  "examples": {
                    "failed": {
                      "description": "Failed delete todolist",
                      "value": {
                        "status_code": 400,
                        "message": "Failed delete user, user uuid not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "status_code": 500,
                        "message": "Server Error, cannot get data"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/user/change_role/:uuid": {
        "put": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "tags": ["User Management"],
          "summary": "Change Role user by uuid. You must have bearrer token to access this",
          "description": "Change Role user by uuid. You must have bearrer token to access this",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "request_body": {
                    "description": "Example raw request, user must have to be role admin to change role user by uuid",
                    "value": {
                      "role": 4
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "name": "uuid_user",
              "in": "raw_request",
              "required": true,
              "description": "if admin was true, user was admin"
            },
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do delete user by uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success update user role by uuid",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "description": "Success update user role by uuid",
                      "value": {
                        "status_code": 200,
                        "message": "Success update user role by uuid"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Failed delete, user uuid not found",
              "content": {
                "application/json": {
                  "examples": {
                    "failed": {
                      "description": "Failed delete todolist",
                      "value": {
                        "status_code": 400,
                        "message": "Failed delete user, user uuid not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization": {
        "get": {
          "tags": ["Organization"],
          "summary": "Get All List Organization",
          "description": "Get All Organization, user and admin can see this",
          "parameters": [
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do get all Organization"
            }
          ],
          "responses": {
            "200": {
              "description": "Get All Organization Success",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Get All Organization Success",
                      "value": {
                        "status_code": 200,
                        "message": "Get All Organization Success",
                        "data": [
                          {
                            "id": 1,
                            "name": "Enggineer Manager",
                            "details": "EM Details"
                          },
                          {
                            "id": 2,
                            "name": "Back-End Manager",
                            "details": "BE Details"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "status_code": 500,
                        "message": "Server Error, cannot get data"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "parameters": [
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do post organization"
            }
          ],
          "tags": ["Organization"],
          "summary": "Create new organization",
          "description": "Create new organization",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "request_body": {
                    "description": "Example raw request, user must have to be role admin to create user",
                    "value": {
                      "name": "Front-End Enggineer (FE)",
                      "details": "TESTING"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success Organization user",
              "content": {
                "application/json": {
                  "examples": {
                    "raw": {
                      "description": "Success Organization user",
                      "value": {
                        "status_code": 200,
                        "message": "Insert Organization success"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request, failed create Organization",
              "content": {
                "application/json": {
                  "examples": {
                    "raw": {
                      "description": "Bad Request, failed create Organization",
                      "value": {
                        "status_code": 400,
                        "message": "Bad Request, failed create Organization"
                      }
                    },
                    "empty": {
                        "description": "Bad Request, failed create Organization",
                        "value": {
                          "status_code": 400,
                          "message": "Bad Request, failed create Organization"
                        }
                      }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "status_code": 500,
                        "message": "Server Error, cannot get data"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/:id": {
        "delete": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "tags": ["Organization"],
          "summary": "Delete existing organization by id",
          "description": "Delete existing organization by id",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "id organization"
            },
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do delete user by uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success delete user by uuid user",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "description": "Success delete todolist",
                      "value": {
                        "status_code": 200,
                        "message": "Success delete user"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "503": {
              "description": "Failed delete, user uuid not found",
              "content": {
                "application/json": {
                  "examples": {
                    "failed": {
                      "description": "Failed delete todolist",
                      "value": {
                        "status_code": 200,
                        "message": "Failed delete user, user uuid not found"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "parameters": [
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do update organization"
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "id chapter"
            }
          ],
          "tags": ["Organization"],
          "summary": "Update organization by id",
          "description": "Update organization by id",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "request_body": {
                    "description": "Example raw request, user must have to be role admin to create user",
                    "value": {
                      "name": "Front-End Enggineer (FE)",
                      "details": "TESTING"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Update Organization Success",
              "content": {
                "application/json": {
                  "examples": {
                    "raw": {
                      "description": "Update Organization Success",
                      "value": {
                        "status_code": 200,
                        "message": "Update Organization success"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request, failed update Organization",
              "content": {
                "application/json": {
                  "examples": {
                    "raw": {
                      "description": "Bad Request, failed update Organization",
                      "value": {
                        "status_code": 400,
                        "message": "Bad Request, failed update Organization"
                      }
                    },
                    "empty": {
                        "description": "Bad Request, failed update Organization",
                        "value": {
                          "status_code": 400,
                          "message": "Bad Request, failed update Organization"
                        }
                      }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "status_code": 500,
                        "message": "Server Error, cannot get data"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/chapter": {
        "post": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "tags": ["Chapter"],
          "summary": "Create new chapter",
          "description": "Create new chapter",
          "parameters": [
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do create chapter"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "request_body": {
                    "description": "Example raw request, user must have to be role admin to create user",
                    "value": {
                      "name": "Backend Enggineer (BE)",
                      "details": "Backend Enggineer adalah blablabla"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success create chapter",
              "content": {
                "application/json": {
                  "examples": {
                    "raw": {
                      "description": "Success create chapter",
                      "value": {
                        "status_code": 200,
                        "message": "Insert chapter success"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request, failed create chapter",
              "content": {
                "application/json": {
                  "examples": {
                    "raw": {
                      "description": "Bad Request, failed create chapter",
                      "value": {
                        "status_code": 400,
                        "message": "Bad Request, failed create chapter"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "status_code": 500,
                        "message": "Server Error, cannot get data"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": ["Chapter"],
          "summary": "Get All List Chapter",
          "description": "Get All Chapter, user and admin can see this",
          "parameters": [
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do get all Chapter"
            }
          ],
          "responses": {
            "200": {
              "description": "Get All Chapter Success",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Get All Chapter Success",
                      "value": {
                        "status_code": 200,
                        "message": "Get All Chapter Success",
                        "data": [
                          {
                            "id": 1,
                            "name": "Front-End Enggineer (FE)",
                            "details": "FE Details"
                          },
                          {
                            "id": 2,
                            "name": "Back-End Enggineer (BE)",
                            "details": "BE Details"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server Error",
              "content": {
                "application/json": {
                  "examples": {
                    "java": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "status_code": 500,
                        "message": "Server Error, cannot get data"
                      }
                    }
                  }
                }
              }
            }
          }
        }        
      },
      "/chapter/:id": {
        "delete": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "tags": ["Chapter"],
          "summary": "Delete existing chapter by id",
          "description": "Delete existing chapter by id",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "id chapter"
            },
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do delete chapter by id"
            }
          ],
          "responses": {
            "200": {
              "description": "Success delete user by id chapter",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "description": "Success delete chapter",
                      "value": {
                        "status_code": 200,
                        "message": "Success delete chapter"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete chapter, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete chapter, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "503": {
              "description": "Failed delete, chapter id not found",
              "content": {
                "application/json": {
                  "examples": {
                    "failed": {
                      "description": "Failed delete chapter",
                      "value": {
                        "status_code": 200,
                        "message": "Failed delete chapter, chapter id not found"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "security": [
            {
              "TodolistAuth": []
            }
          ],
          "tags": ["Chapter"],
          "summary": "Change Role user by uuid. You must have bearrer token to access this",
          "description": "Change Role user by uuid. You must have bearrer token to access this",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "request_body": {
                    "description": "Example raw request, user must have to be role admin to change role user by uuid",
                    "value": {
                      "role": 4
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "name": "uuid_user",
              "in": "raw_request",
              "required": true,
              "description": "if admin was true, user was admin"
            },
            {
              "name": "bearrer",
              "in": "header",
              "required": true,
              "description": "Need bearrer token to do delete user by uuid"
            }
          ],
          "responses": {
            "200": {
              "description": "Success update user role by uuid",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "description": "Success update user role by uuid",
                      "value": {
                        "status_code": 200,
                        "message": "Success update user role by uuid"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "UnAuthorize, token invalid",
              "content": {
                "application/json": {
                  "examples": {
                    "Token Invalid": {
                      "description": "UnAuthorize, token invalid",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize (token invalid)"
                      }
                    },
                    "Token Invalid (token time exceeded)": {
                      "description": "UnAuthorize, token invalid (token time exceeded)",
                      "value": {
                        "status_code": 401,
                        "message": "Failed delete user, UnAuthorize token invalid(time exceeded)"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Failed delete, user uuid not found",
              "content": {
                "application/json": {
                  "examples": {
                    "failed": {
                      "description": "Failed delete todolist",
                      "value": {
                        "status_code": 400,
                        "message": "Failed delete user, user uuid not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/login": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Login Account",
          "description": "Login to existing account",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Login"
                },
                "examples": {
                  "admin": {
                    "description": "Example login as admin",
                    "value": {
                      "username": "admin",
                      "password": "admin123"
                    }
                  },
                  "user": {
                    "description": "Example login as user",
                    "value": {
                      "username": "user",
                      "password": "admin123"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success login",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseAuth"
                  },
                  "examples": {
                    "admin": {
                      "description": "Success login as admin",
                      "value": {
                        "message": "login success",
                        "status_code": 200,
                        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluMTIzIn0.eRTIR_L7vUt9NZtS5g3p_zrJDownIKzsmjy_P_aTEQQ"
                      }
                    },
                    "user": {
                      "description": "Success login as user",
                      "value": {
                        "message": "login success",
                        "status_code": 200,
                        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluMTIzIn0.eRTIR_L7vUt9NZtS5g3p_zrJDownIKzsmjy_P_aTEQQ"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Bad Request",
                      "value": {
                        "message": "username atau password salah",
                        "status_code": 400
                      }
                    },
                    "user": {
                      "description": "Bad Request",
                      "value": {
                        "message": "username atau password salah",
                        "status_code": 400
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Internal Server Error",
                      "value": {
                        "message": "Internal Server Error",
                        "status_code": 500
                      }
                    },
                    "user": {
                      "description": "Internal Server Error",
                      "value": {
                        "message": "Internal Server Error",
                        "status_code": 500
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/change-password/:id": {
        "put": {
          "tags": [
            "Account"
          ],
          "parameters": [
            {
              "name": "Bearer Token",
              "description": "include in headers",
              "required": true,
              "in": "header",
              "schema": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6ImFkbWluIiwiRW1haWwiOiJhZG1pbkBnbWFpbC5jb20iLCJJc19Sb2xlIjoxLCJleHAiOjE2Nzg5ODcxMTd9.zbMtYjuQ83CRc_T_RB4a_O_qoYRcKW2WREvJvU8Xat0"
              }
            },
            {
              "name": "id_user",
              "in": "path",
              "required": true,
              "description": "id squad sebagai parameter delete",
              "schema": {
                "type": "integer",
                "example": 1
              }
            }
          ],
          "summary": "Change Password",
          "description": "Change Account Password",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePassword"
                },
                "examples": {
                  "admin": {
                    "description": "Example change password admin account",
                    "value": {
                      "id_user": 1,
                      "old_passoword": "admin123",
                      "new_password": "admin1234",
                      "confirm_new_password": "admin1234"
                    }
                  },
                  "user": {
                    "description": "Example change password user account",
                    "value": {
                      "id": 2,
                      "old_passoword": "user123",
                      "new_password": "user1234",
                      "confirm_new_password": "user1234"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success change password",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Success change password admin",
                      "value": {
                        "message": "change password success",
                        "status_code": 200
                      }
                    },
                    "user": {
                      "description": "Success change password user",
                      "value": {
                        "message": "change password success"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Status Unauthorized",
                      "value": {
                        "message": "Failed, UnAuthorize (token invalid)",
                        "status_code": 401
                      }
                    },
                    "user": {
                      "description": "Status Unauthorized",
                      "value": {
                        "message": "Failed, UnAuthorize (token invalid)",
                        "status_code": 401
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "message": "Server Error, cannot get data",
                        "status_code": 500
                      }
                    },
                    "user": {
                      "description": "Server Error, cannot get data",
                      "value": {
                        "message": "Server Error, cannot get data",
                        "status_code": 500
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/logout": {
        "post": {
          "tags": [
            "Account"
          ],
          "parameters": [
            {
              "name": "Bearer Token",
              "description": "include in headers",
              "required": true,
              "in": "header",
              "schema": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6ImFkbWluIiwiRW1haWwiOiJhZG1pbkBnbWFpbC5jb20iLCJJc19Sb2xlIjoxLCJleHAiOjE2Nzg5ODcxMTd9.zbMtYjuQ83CRc_T_RB4a_O_qoYRcKW2WREvJvU8Xat0"
              }
            }
          ],
          "summary": "Logout Account",
          "description": "Logout from existing account",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Logout"
                },
                "examples": {
                  "admin": {
                    "description": "Example logout account and deleting token",
                    "value": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluMTIzIn0.eRTIR_L7vUt9NZtS5g3p_zrJDownIKzsmjy_P_aTEQQ"
                    }
                  },
                  "user": {
                    "description": "Example logout account and deleting token",
                    "value": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluMTIzIn0.eRTIR_L7vUt9NZtS5g3p_zrJDownIKzsmjy_P_aTEQQ"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success logout",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseAuth"
                  },
                  "examples": {
                    "admin": {
                      "description": "Success logout",
                      "value": {
                        "message": "logout success",
                        "status_code": 200
                      }
                    },
                    "user": {
                      "description": "Success login as user",
                      "value": {
                        "message": "logout success",
                        "status_code": 200
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Status Unauthorized",
                      "value": {
                        "message": "Failed, UnAuthorize (token invalid)",
                        "status_code": 401
                      }
                    },
                    "user": {
                      "description": "Status Unauthorized",
                      "value": {
                        "message": "Failed, UnAuthorize (token invalid)",
                        "status_code": 401
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Internal Server Error",
                      "value": {
                        "message": "Internal Server Error",
                        "status_code": 500
                      }
                    },
                    "user": {
                      "description": "Internal Server Error",
                      "value": {
                        "message": "Internal Server Error",
                        "status_code": 500
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/attendance": {
        "get": {
          "tags": [
            "Attendance"
          ],
          "summary": "Get Attendance",
          "description": "Get All Attendance",
          "parameters": [
            {
              "name": "Bearer Token",
              "description": "include in headers",
              "required": true,
              "in": "header",
              "schema": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6ImFkbWluIiwiRW1haWwiOiJhZG1pbkBnbWFpbC5jb20iLCJJc19Sb2xlIjoxLCJleHAiOjE2Nzg5ODcxMTd9.zbMtYjuQ83CRc_T_RB4a_O_qoYRcKW2WREvJvU8Xat0"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of all attendance",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Attendance"
                  },
                  "examples": {
                    "admin": {
                      "description": "List of all attendance",
                      "value": {
                        "data": 
                          [
                            {
                              "id": 1,
                              "tanggal": "2023-03-20",
                              "jam_datang": "08:00:00",
                              "jam_pulang": "17:00:00",
                              "overtime": 0,
                              "status": 1
                            },
                            {
                              "id": 2,
                              "tanggal": "2023-03-20",
                              "jam_datang": "09:00:00",
                              "jam_pulang": "18:00:00",
                              "overtime": 0,
                              "status": 1
                            }
                          ]
                        }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Status Unauthorized",
                        "value": {
                          "message": "Failed, UnAuthorize (token invalid)",
                          "status_code": 401
                        }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "user": {
                      "description": "Status Forbidden",
                      "value": {
                        "message": "Failed, UnAuthorize (token invalid)",
                        "status_code": 403
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Internal Server Error",
                      "value": {
                        "message": "Server Error, cannot get data",
                        "status_code": 500
                      }
                    },
                    "user": {
                      "description": "Internal Server Error",
                      "value": {
                        "message": "Server Error, cannot get data",
                        "status_code": 500
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/download-attendance": {
        "get": {
          "tags": [
            "Attendance"
          ],
          "parameters": [
            {
              "name": "Bearer Token",
              "description": "include in headers",
              "required": true,
              "in": "header",
              "schema": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6ImFkbWluIiwiRW1haWwiOiJhZG1pbkBnbWFpbC5jb20iLCJJc19Sb2xlIjoxLCJleHAiOjE2Nzg5ODcxMTd9.zbMtYjuQ83CRc_T_RB4a_O_qoYRcKW2WREvJvU8Xat0"
              }
            }
          ],
          "summary": "Download Attendance",
          "description": "Download Attendance in CSV Format",
          "produces": [
            "text/csv"
          ],
          "responses": {
            "200": {
              "description": "Download attendance",
              "headers": {
                "Content-Disposition": {
                  "type": "string",
                  "description": "Attachment with filename attendance.csv",
                  "example": "attachment; filename=attendance.csv"
                }
              },
              "content": {
                "text/csv": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "example": {
                      "description": "Download Attendance Success",
                      "value": {
                        "message": "download success",
                        "status_code": 200
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Status Unauthorized",
                        "value": {
                          "message": "invalid tokenFailed, UnAuthorize (token invalid)",
                          "status_code": 401
                        }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "user": {
                      "description": "Status Forbidden",
                      "value": {
                        "message": "Failed, UnAuthorize (token invalid)",
                        "status_code": 403
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Responses"
                  },
                  "examples": {
                    "admin": {
                      "description": "Internal Server Error",
                      "value": {
                        "message": "Server Error, cannot get data",
                        "status_code": 500
                      }
                    },
                    "user": {
                      "description": "Internal Server Error",
                      "value": {
                        "message": "Server Error, cannot get data",
                        "status_code": 500
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/squad": {
        "post": {
          "security": [
            {
              "JWT": []
            }
          ],
          "tags": [
            "Squad"
          ],
          "summary": "post add squad",
          "description": "add squad (admin only)",
          "parameters": [
            {
              "name": "bearer_token",
              "in": "header",
              "required": true,
              "description": "token untuk authenticated",
              "schema": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6ImFkbWluIiwiRW1haWwiOiJhZG1pbkBnbWFpbC5jb20iLCJJc19Sb2xlIjoxLCJleHAiOjE2Nzg5ODcxMTd9.zbMtYjuQ83CRc_T_RB4a_O_qoYRcKW2WREvJvU8Xat0"
              }
            }       
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "minLength": 1
                    },
                    "deskripsi" : {
                      "type":"string",
                      "minLength": 1
                    }
                  }
                },
                "example" : {
                  "name": "marketing",
                  "deskripsi": "promotion and spornsorships"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Success Create Squad",
              "content": {
                "application/json" : {
                  "schema" : {
                    "type": "object",
                      "properties": {
                      "data": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "minLength": 1
                          },
                          "description" : {
                            "type":"string",
                            "minLength": 1
                          }
                        }
                      },
                      "responseCode": {
                        "type": "integer",
                        "minLength": 1
                      },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  },
                  "example" : {
                    "data": {
                      "name": "marketing",
                      "description": "promotion and spornsorships"
                    },
                    "status_code" : 201,
                    "message": "add squad successfully"
                  }
                }
              }
            },
            "400": {
              "description": "failed is empty a body request",
              "content": {
                "application/json" : {
                  "schema" : {
                    "type": "object",
                      "properties": {
                      "responseCode": {
                        "type": "integer",
                        "minLength": 1
                      },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  },
                  "example" : {
                    "status_code" : 400,
                    "message": "is empty a body request"
                  }
                }
              }
            },
            "401": {
              "description": "failed is not authenticated",
              "content": {
                "application/json" : {
                  "schema" : {
                    "type": "object",
                      "properties": {
                      "responseCode": {
                        "type": "integer",
                        "minLength": 1
                      },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  },
                  "example" : {
                    "status_code" : 400,
                    "message": "unauthorized"
                  }
                }
              }
            },
            "403": {
              "description": "failed forbidden",
              "content": {
                "application/json" : {
                  "schema" : {
                    "type": "object",
                      "properties": {
                      "responseCode": {
                        "type": "integer",
                        "minLength": 1
                      },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  },
                  "example" : {
                    "status_code" : 403,
                    "message": "forbidden"
                  }
                }
              }
            },
            "500": {
              "description": "failed internal server error",
              "content": {
                "application/json" : {
                  "schema" : {
                    "type": "object",
                      "properties": {
                      "responseCode": {
                        "type": "integer",
                        "minLength": 1
                      },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  },
                  "example" : {
                    "status_code" : 500,
                    "message": "internal ser"
                  }
                }
              }
            }
          }
        },
        "get": {
          "security": [
            {
              "JWT": []
            }
          ],
          "tags": [
            "Squad"
          ],
          "summary": "list squad",
          "description": "update squad (admin only)",
          "parameters": [
            {
              "name": "bearer_token",
              "in": "header",
              "required": true,
              "description": "token untuk authenticated",
              "schema": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6ImFkbWluIiwiRW1haWwiOiJhZG1pbkBnbWFpbC5jb20iLCJJc19Sb2xlIjoxLCJleHAiOjE2Nzg5ODcxMTd9.zbMtYjuQ83CRc_T_RB4a_O_qoYRcKW2WREvJvU8Xat0"
              }
            }      
          ],
          "responses": {
            "200": {
              "description": "Get List Squad successfully",
              "content": {
                "application/json" : {
                  "schema" : {
                    "type": "object",
                      "properties": {
                      "data": {
                        "type" : "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "minLength": 1
                          },
                          "user": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                  "type": "string",
                                  "minLength": 1
                                }
                            }
                          },
                          "responseCode": {
                            "type": "integer",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "examples": {
                    "user": {
                      "description": "Example success get all todolist",
                      "value": {
                        "data" : [
                            {
                              "id": "1",
                              "name": "intern engineer",
                              "deskripsi": "test"
                            },
                            {
                                "id": "2",
                                "name": "intern hr",
                                "deskripsi": "test"
                            }
                          ]
                      }
                    },
                    "admin": {
                        "description": "Example success get all todolist",
                        "value": {
                          "data" : [
                              {
                                "id": "1",
                                "name": "intern engineer",
                                "deskripsi": "test",
                                "user": [{"uuid" : "1"},{"uuid" : "2"}]
                              },
                              {
                                  "id": "2",
                                  "name": "intern hr",
                                  "deskripsi": "test",
                                  "user": [{"uuid" : "3"},{"uuid" : "4"}]
                              }
                          ]
                        }
                      }
                  }
                }
              }
            },
            "401": {
              "description": "failed is not authenticated",
              "content": {
                "application/json" : {
                  "schema" : {
                    "type": "object",
                      "properties": {
                      "responseCode": {
                        "type": "integer",
                        "minLength": 1
                      },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  },
                  "example" : {
                    "status_code" : 400,
                    "message": "unauthorized"
                  }
                }
              }
            },
            "500": {
              "description": "failed internal server error",
              "content": {
                "application/json" : {
                  "schema" : {
                    "type": "object",
                      "properties": {
                      "responseCode": {
                        "type": "integer",
                        "minLength": 1
                      },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  },
                  "example" : {
                    "status_code" : 500,
                    "message": "internal server error"
                  }
                }
              }
            }
          }
        }
      },
      "/squad/:id": {
        "delete": {
            "security": [
              {
                "JWT": []
              }
            ],
            "tags": [
              "Squad"
            ],
            "summary": "delete squad",
            "description": "delete squad (admin only)",
            "parameters": [
              {
                "name": "bearer_token",
                "in": "header",
                "required": true,
                "description": "token untuk authenticated",
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6ImFkbWluIiwiRW1haWwiOiJhZG1pbkBnbWFpbC5jb20iLCJJc19Sb2xlIjoxLCJleHAiOjE2Nzg5ODcxMTd9.zbMtYjuQ83CRc_T_RB4a_O_qoYRcKW2WREvJvU8Xat0"
                }
              },
              {
                "name": "id",
                "in": "path",
                "required": true,
                "description": "id squad sebagai parameter delete",
                "schema": {
                  "type": "integer",
                  "example": 1
                }
              }       
            ],
            "responses": {
              "200": {
                "description": "Success Delete Squad",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1
                        },
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "name": "marketing",
                      "status_code" : 201,
                      "message": "delete squad successfully"
                    }
                  }
                }
              },
              "400": {
                "description": "failed is empty a path request",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "status_code" : 400,
                      "message": "is empty a path request"
                    }
                  }
                }
              },
              "401": {
                "description": "failed is not authenticated",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "status_code" : 400,
                      "message": "unauthorized"
                    }
                  }
                }
              },
              "403": {
                "description": "failed forbidden",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "status_code" : 403,
                      "message": "forbidden"
                    }
                  }
                }
              },
              "500": {
                "description": "failed internal server error",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "status_code" : 500,
                      "message": "internal server error"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "security": [
              {
                "JWT": []
              }
            ],
            "tags": [
              "Squad"
            ],
            "summary": "update squad",
            "description": "update squad (admin only)",
            "parameters": [
              {
                "name": "bearer_token",
                "in": "header",
                "required": true,
                "description": "token untuk authenticated",
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6ImFkbWluIiwiRW1haWwiOiJhZG1pbkBnbWFpbC5jb20iLCJJc19Sb2xlIjoxLCJleHAiOjE2Nzg5ODcxMTd9.zbMtYjuQ83CRc_T_RB4a_O_qoYRcKW2WREvJvU8Xat0"
                }
              },
              {
                "name": "id",
                "in": "path",
                "required": true,
                "description": "id squad sebagai parameter update",
                "schema": {
                  "type": "integer",
                  "example": 1
                }
              }       
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json" : {
                  "schema" : {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "deskripsi" : {
                        "type":"string",
                        "minLength": 1
                      }
                    }
                  },
                  "example" : {
                    "name": "marketing",
                    "deskripsi": "promotion and spornsorships"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Success Create Squad",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "minLength": 1
                            },
                            "description" : {
                              "type":"string",
                              "minLength": 1
                            }
                          }
                        },
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "data": {
                        "name": "marketing",
                        "description": "promotion and spornsorships"
                      },
                      "status_code" : 201,
                      "message": "edit squad successfully"
                    }
                  }
                }
              },
              "400": {
                "description": "failed is empty a path request",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "status_code" : 400,
                      "message": "is empty a path request"
                    }
                  }
                }
              },
              "401": {
                "description": "failed is not authenticated",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "status_code" : 400,
                      "message": "unauthorized"
                    }
                  }
                }
              },
              "403": {
                "description": "failed forbidden",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "status_code" : 403,
                      "message": "forbidden"
                    }
                  }
                }
              },
              "500": {
                "description": "failed internal server error",
                "content": {
                  "application/json" : {
                    "schema" : {
                      "type": "object",
                        "properties": {
                        "responseCode": {
                          "type": "integer",
                          "minLength": 1
                        },
                        "message": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "example" : {
                      "status_code" : 500,
                      "message": "internal server error"
                    }
                  }
                }
              }
            }
          }
      }
    },
    "components": {
      "securitySchemes": {
        "JWT": {
            "description": "Authentication for Squad RESTful API",
            "type": "apiKey",
            "in": "header",
            "name": "X-API-Key"
        }
      },
      "schemas": {
        "Responses": {
          "type": "object",
          "properties": {
            "status_code": {
              "type": "integer"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "ResponseAuth": {
          "type": "object",
          "properties": {
            "status_code": {
              "type": "integer"
            },
            "message": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        },
        "Login" : {
          "type": "object",
          "properties": {
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          }
        },
        "ChangePassword": {
          "type": "object",
          "properties": {
            "id_user": {
              "type": "integer"
            },
            "old_passoword": {
              "type": "string"
            },
            "new_password": {
              "type": "string"
            },
            "confirm_new_password": {
              "type": "string"
            }
          }
        },
        "Logout": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string"
            }
          }
        },
        "Attendance": {
          "type": "array",
          "properties": {
            "id": {
              "type": "integer",
              "description": "auto increment"
            },
            "tanggal": {
              "type": "string",
              "format": "date"
            },
            "jam_datang": {
              "type": "string",
              "format": "time"
            },
            "jam_pulang": {
              "type": "string",
              "format": "time"
            },
            "overtime": {
              "type": "integer"
            },
            "status": {
              "type": "integer"
            }
          }
        }
      }
    }
  }
  